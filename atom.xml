<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>schur&#39;blog</title>
  
  <subtitle>Explore the Cyber World!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.happyhacking.top/"/>
  <updated>2021-01-05T06:44:50.052Z</updated>
  <id>https://www.happyhacking.top/</id>
  
  <author>
    <name>schur</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="https://www.happyhacking.top/2021/01/05/test/"/>
    <id>https://www.happyhacking.top/2021/01/05/test/</id>
    <published>2021-01-05T06:43:08.614Z</published>
    <updated>2021-01-05T06:44:50.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mweb-test"><a href="#Mweb-test" class="headerlink" title="Mweb test"></a>Mweb test</h1><a id="more"></a><p>test</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mweb-test&quot;&gt;&lt;a href=&quot;#Mweb-test&quot; class=&quot;headerlink&quot; title=&quot;Mweb test&quot;&gt;&lt;/a&gt;Mweb test&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>转载|正位之说</title>
    <link href="https://www.happyhacking.top/2019/12/18/put-yourself-in-right-position/"/>
    <id>https://www.happyhacking.top/2019/12/18/put-yourself-in-right-position/</id>
    <published>2019-12-18T04:15:19.000Z</published>
    <updated>2019-12-18T04:31:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然读之，感慨良多</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;吾常闻上医之良方在于四观，治世之妙策在于勤察。四观能渐涤病灶之根本，勤察能逐拨乱象于繁杂。吾归一言，在于正位。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正位乃知本位，知交互，知所施，知所得，由知所权，而知所以然。正位后则可以内观己而外视人，观己可以明心，视人则可以见性。明心见性则知己知彼。故圣人曰：知人者智，自知者明。正其位，知其责，守其短，扬其长，则所向披靡，和乐融融；出其位，迷其责，则不能固本，阴阳失衡，前后相措，缓急不正。正其位，乃动非静，是谓佛家曰之动禅。动之机在于审时度己，度己而可以度世。度己之机，在于实践而毋空想。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;读书少而思虑多，是谓蠢。蠢则盲动，害人害己；读人之书，思人之事，是谓呆。呆则不可以出世，不可以治乱，不可以终人之事；读人之书，推己之事，是谓明。明则可以取精华，去糟粕，知其短，守其长，拨乱反正，出世临事；毋可读之书，专其思，思其天下事，百姓之疾苦，是谓道，吾在今世尚未见之有哉。其可以谓之太上之思。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;思之有四，而世人进其二者甚少，蠢者呆者甚多。未进三者之思，易出窍，出窍则思出其位，思出其位则乱本心，乱本心则妄自大，妄自大则乐评于人，则民多怨多争多苦多病，病久矣亡也。殊不知蠢呆之思，之辩，是谓伪学，不可以用之于事，只可以用之于空谈。空谈多而自满，满自轻视天下事，自古之范例多矣，尔不长闻赵括用兵之典？云长丧命之因？思之蠢呆者，大矣，大矣自壮矣，物极必反，物壮则老，推而想之，知其命运矣。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实践矣有四，而无伤。不伤人，不伤事，不伤时，亦不自伤。是谓多行无大害，实践有百益。无知而行，虽反复劳神，而多积，多积则必有功，披星戴月日复一日，终其有所成；少知而行，可以有方，有框，有界，可以少歧途，以知匡其行，行为大也；知行参半，则可以成学术，立其说，教其民。知到极处便是行，行至极处便是知。是谓阳明圣人之言知行合一。知无知，行无行，则宛如云端，知无边，行无迹，若有若无若存若离，天地临崩之时而现，功成身退而隐。观古之奇人，尔不尝闻之张良，陶朱公，刘伯温之行？此之为太上之行。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;行之有四，而民进其三者几无。虽进其三者寡，下其三者亦无咎。行事于天下则见己之小，知己之小则能守己之位，则内敛而谦谨，不失恒。无妄我亦无悲我。立足当下，日拱一卒，勤勤恳恳，行己之事，虽不可为上行论之，仍不失其位，不失其位乃可以正其位。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此之为吾正位之说，吾心毅坚守之</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然读之，感慨良多&lt;/p&gt;
    
    </summary>
    
    
      <category term="闲谈" scheme="https://www.happyhacking.top/categories/%E9%97%B2%E8%B0%88/"/>
    
    
      <category term="reading" scheme="https://www.happyhacking.top/tags/reading/"/>
    
      <category term="thoughts" scheme="https://www.happyhacking.top/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Python百万级压测MariaDB</title>
    <link href="https://www.happyhacking.top/2019/12/05/use-python-to-fuck-mariadb/"/>
    <id>https://www.happyhacking.top/2019/12/05/use-python-to-fuck-mariadb/</id>
    <published>2019-12-05T04:03:07.000Z</published>
    <updated>2019-12-10T14:37:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>To record the final database homework～</p><a id="more"></a><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><table><thead><tr><th align="center">设备</th><th align="left">阿里云服务器1h2g</th></tr></thead><tbody><tr><td align="center">系统</td><td align="left">ubuntu-14.04.1</td></tr><tr><td align="center">数据库</td><td align="left">10.0.38-MariaDB</td></tr></tbody></table><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><p>本测试在python环境下使用pymysql和Matplotlib下进行</p><h2 id="测试内容"><a href="#测试内容" class="headerlink" title="测试内容"></a>测试内容</h2><table><thead><tr><th align="left">测试内容</th><th align="left">有无主键</th><th align="left">有无索引</th></tr></thead><tbody><tr><td align="left">等值查询耗时</td><td align="left">无</td><td align="left">无</td></tr><tr><td align="left">插入一行耗时</td><td align="left">无</td><td align="left">无</td></tr><tr><td align="left">等值查询耗时</td><td align="left">无</td><td align="left">有</td></tr><tr><td align="left">插入一行耗时</td><td align="left">无</td><td align="left">有</td></tr><tr><td align="left">等值查询耗时</td><td align="left">有</td><td align="left">无</td></tr><tr><td align="left">插入一行耗时</td><td align="left">有</td><td align="left">无</td></tr></tbody></table><h2 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h2><h3 id="基础表的结构"><a href="#基础表的结构" class="headerlink" title="基础表的结构"></a>基础表的结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test` (</span><br><span class="line">  `pk` varchar(12) NOT NULL,</span><br><span class="line">  `idx` varchar(12) NOT NULL</span><br><span class="line">) DEFAULT CHARSET utf8;</span><br></pre></td></tr></table></figure><h3 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h3><p>百万条量的数据，两个字段分别有12位的长度，生成ascii可见字符共有126-32个，看起来两个字段都与前面发生碰撞的几率比较小，写出随机数生成函数，另外生成长度相等的数据在插入的时候对插入时间横向比较的影响更小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">charset = &apos;&apos;</span><br><span class="line">for i in range(32,127):</span><br><span class="line">    charset += chr(i)</span><br><span class="line">def generate_data():</span><br><span class="line">    return &apos;&apos;.join(random.sample(charset,12))</span><br></pre></td></tr></table></figure><h3 id="记录测试数据"><a href="#记录测试数据" class="headerlink" title="记录测试数据"></a>记录测试数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">json_field = &#123;&apos;index&apos;: &apos;&apos;, &apos;time2cost&apos;: &apos;&apos;, &apos;type&apos;: &apos;&apos;&#125;</span><br><span class="line">json_data = []</span><br></pre></td></tr></table></figure><p>将插入或读取时间首先以python dict的形式作出记录，然后加入data列表，最后以json的形式导出文件并渲染成图表，记录的json各个字段分别为记录时插入或查询的总数量，插入或查询花费的时间，操作类型</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>插入数据一开始出现了问题，原来只在主函数里设置了一个连接，所有线程共用一个连接，本来以为加上个线程锁，就可以解决这个问题，但是即便有锁会卡在第二个线程，解决办法就是在每个线程都新建一个连接，然而这又将产生另外一个问题，大量的连接大大拖慢了插入数据的速度，这里有两种方式来解决</p><ul><li><p>一条语句插入多条记录(不太好写代码)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into xxx() values() () ()......</span><br></pre></td></tr></table></figure></li><li><p>用一个连接重复插入大量数据</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;xxx&apos;, passwd=&apos;xxx&apos;, db=&apos;xxx&apos;, charset=&apos;utf8&apos;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">for i in range(10000):</span><br><span class="line">    cursor.execute(&apos;INSERT INTO `test` (`pk`, `idx`) VALUES (%s,%s)&apos;, (generate_data(),generate_data()))</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>使用matplotlib渲染导出的json数据</p><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>插入时间与数据量的关系图：</p><p><img src="https://schur-bed.oss-cn-beijing.aliyuncs.com/blog/insert-time.png" alt></p><p>查询时间与数据量的关系图：</p><p><img src="https://schur-bed.oss-cn-beijing.aliyuncs.com/blog/query-time1.png" alt></p><p>由于有索引或主键的时间消耗与无主键且无索引的表相差甚大，所以上图将两条线渲染成了无差别的一条直线，为了可视直观，我们单独渲染主键和索引的查询时间图</p><p><img src="https://schur-bed.oss-cn-beijing.aliyuncs.com/blog/query-time2.png" alt></p><h3 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h3><h4 id="主键与索引对查询的影响"><a href="#主键与索引对查询的影响" class="headerlink" title="主键与索引对查询的影响"></a>主键与索引对查询的影响</h4><p>随着存储量的增加，无主键、无索引的查询时间逐步线性上升；而有主键（或索引）时，对主键列（或索引列）进行等值查询的耗时基本稳定在10ms左右</p><h4 id="主键与索引对插入的影响"><a href="#主键与索引对插入的影响" class="headerlink" title="主键与索引对插入的影响"></a>主键与索引对插入的影响</h4><p>可以看到数据量在百万量机的时间主键与索引对数据的插入速度影响不大,但是随着数据量的增加，因为有主键插入时，还要检查主键列是否与之前数据重复，所以插入效率相比无主键和索引的效率低</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>当线程数量明显大于CPU的核数的时候，线程数对效率的提高并不明显,何乐大佬666～</li></ul><h3 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h3><p>优化一下可以把一个连接插一次改成一个连接插多次，可以大大提高速度,懒得改了～</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"># -*-coding:utf-8 -*-</span><br><span class="line"># !/usr/bin/python3</span><br><span class="line"></span><br><span class="line">import random</span><br><span class="line">import datetime</span><br><span class="line">import pymysql</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">json_field = &#123;&apos;index&apos;: &apos;&apos;, &apos;time2cost&apos;: &apos;&apos;, &apos;type&apos;: &apos;&apos;&#125;</span><br><span class="line">json_data = []</span><br><span class="line">json_data2 = []</span><br><span class="line"></span><br><span class="line">#生成插入字符集并生成插入数据</span><br><span class="line">charset = &apos;&apos;</span><br><span class="line">for i in range(32,127):</span><br><span class="line">    charset += chr(i)</span><br><span class="line">def generate_data():</span><br><span class="line">    return &apos;&apos;.join(random.sample(charset,12))</span><br><span class="line"></span><br><span class="line">def insert():</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;xx&apos;, passwd=&apos;xx&apos;, db=&apos;test&apos;, charset=&apos;utf8&apos;)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    for i in range(10000):</span><br><span class="line">        cursor.execute(&apos;INSERT INTO `test` (`pk`, `idx`) VALUES (%s,%s)&apos;, (generate_data(),generate_data()))</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">def select():</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;xx&apos;, passwd=&apos;xx&apos;, db=&apos;test&apos;, charset=&apos;utf8&apos;)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    start=datetime.datetime.now()</span><br><span class="line">    cursor.execute(&apos;SELECT * FROM `test` WHERE idx = %s&apos;, generate_data())</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    </span><br><span class="line">def insert_time():</span><br><span class="line">    start = datetime.datetime.now()</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;xx&apos;, passwd=&apos;xx&apos;, db=&apos;test&apos;, charset=&apos;utf8&apos;)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(&apos;INSERT INTO `test` (`pk`, `idx`) VALUES (%s,%s)&apos;, (generate_data(),generate_data()))</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    end = datetime.datetime.now()</span><br><span class="line">    return (end-start).microseconds</span><br><span class="line"></span><br><span class="line">def select_time():</span><br><span class="line">    start=datetime.datetime.now()</span><br><span class="line">    select()</span><br><span class="line">    end=datetime.datetime.now()</span><br><span class="line">    return (end-start).microseconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def average_insert_time():</span><br><span class="line">    totaltime = 0</span><br><span class="line">    for i in range(100):</span><br><span class="line">        totaltime += insert_time()</span><br><span class="line">    return totaltime/100</span><br><span class="line"></span><br><span class="line">def average_select_time():</span><br><span class="line">    totaltime = 0</span><br><span class="line">    for i in range(100):</span><br><span class="line">        totaltime += select_time()</span><br><span class="line">    return totaltime/100</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for i in range(100):</span><br><span class="line">        insert()</span><br><span class="line">        json_field = &#123;&#125;</span><br><span class="line">        json_field[&apos;index&apos;] = (i+1)*10000</span><br><span class="line">        json_field[&apos;time2cost&apos;] = average_insert_time()</span><br><span class="line">        json_field[&apos;type&apos;] = &apos;write&apos;</span><br><span class="line">        print(json_field)</span><br><span class="line">        json_data.append(json_field)</span><br><span class="line">        json_field = &#123;&#125;</span><br><span class="line">        json_field[&apos;index&apos;] = (i+1)*10000</span><br><span class="line">        json_field[&apos;time2cost&apos;] = average_select_time()</span><br><span class="line">        json_field[&apos;type&apos;] = &apos;read&apos;</span><br><span class="line">        print(json_field)</span><br><span class="line">        json_data2.append(json_field)</span><br><span class="line">    with open(&apos;data.json&apos;, &apos;a&apos;) as f:</span><br><span class="line">        json.dump(json_data,f)</span><br><span class="line">    with open(&apos;data2.json&apos;, &apos;a&apos;) as f:</span><br><span class="line">        json.dump(json_data2,f)</span><br></pre></td></tr></table></figure><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line">x_p = []</span><br><span class="line">y_p = []</span><br><span class="line">x_i = []</span><br><span class="line">y_i = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read_json(file):</span><br><span class="line">    with open(file,&apos;r&apos;) as load_f:</span><br><span class="line">        tmp = json.load(load_f)</span><br><span class="line">    return tmp</span><br><span class="line"></span><br><span class="line">for i in read_json(&apos;data2-n-n.json&apos;):</span><br><span class="line">    if i[&apos;index&apos;]%4000==0:</span><br><span class="line">        x.append(i[&apos;index&apos;])</span><br><span class="line">        y.append(i[&apos;time2cost&apos;])</span><br><span class="line"></span><br><span class="line">for i in read_json(&apos;data2-i.json&apos;):</span><br><span class="line">    if i[&apos;index&apos;]%4000==0:</span><br><span class="line">        x_i.append(i[&apos;index&apos;])</span><br><span class="line">        y_i.append(i[&apos;time2cost&apos;])</span><br><span class="line"></span><br><span class="line">for i in read_json(&apos;data-p2.json&apos;):</span><br><span class="line">    if i[&apos;index&apos;]%4000==0:</span><br><span class="line">        x_p.append(i[&apos;index&apos;])</span><br><span class="line">        y_p.append(i[&apos;time2cost&apos;])</span><br><span class="line"></span><br><span class="line">plt.title(&quot;Relationship between data volume and query time&quot;,fontsize=24)</span><br><span class="line">plt.ylabel(&quot;query time(us)&quot;,fontsize=14)</span><br><span class="line">plt.xlabel(&quot;data volume&quot;,fontsize=14)</span><br><span class="line">#plt.plot(x, y,&apos;r&apos;, label=&apos;have nothing&apos;)</span><br><span class="line">plt.plot(x_i, y_i,&apos;r&apos;, label=&apos;only have index&apos;,color = &apos;blue&apos;)</span><br><span class="line">plt.plot(x_p, y_p,&apos;r&apos;, label=&apos;only have primary key&apos;,color = &apos;yellow&apos;)</span><br><span class="line"></span><br><span class="line">plt.legend(bbox_to_anchor=[0.3, 1])</span><br><span class="line"></span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To record the final database homework～&lt;/p&gt;
    
    </summary>
    
    
      <category term="测试" scheme="https://www.happyhacking.top/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="db" scheme="https://www.happyhacking.top/tags/db/"/>
    
      <category term="python" scheme="https://www.happyhacking.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Cheat Sheet</title>
    <link href="https://www.happyhacking.top/2019/12/01/notes/"/>
    <id>https://www.happyhacking.top/2019/12/01/notes/</id>
    <published>2019-12-01T00:00:00.000Z</published>
    <updated>2020-01-12T03:15:20.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, access token is required here." />    <label for="hbePass">Hey, access token is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0a0696e8779ce124972f64d2113a01e5da6aa788250263423854834dae72e523">62693b22f2f05e2d56926f01b00400a244c1e748584c5e7862394f7c2036dff8b340ced47fe5b0e3e30c8a4831eef123bd126bd3442782b1c9028d35f64cd518b7d057a0e5b53b96653c9eae1c5f2bcee2162c05db549a7e3ce01abffa7ec796d079614930f3bc035f99b9a97d30919947769c9c3b3e238578fd5cb720a230f6c0173fef1eb1fd1eb691d1f349243b53902b4ccb949d33b9df6c5b492398a123345181567e6370d83cf265cad0b69bf87bc1020f11930f531b636ae8312bdef6ae1ad0e42b9b247c90b08ca22014d3809f56a344ca6910cec5d2bde321d17d433f62757ef3461ebc197e5689e770759f3153c0abf7d17dfc61d1a25146ec5e50a192855c638a55cde9f1da01389b69963d3a5bcef708dd759c09b56175148bb08fb14e1d77f521b514a48fe2e5dc10b0d3180feb398feaad44fd16cc1a9a382572cf3f911731eb04ebed8038cc61af1e5e3fa3c79ad7a835dcac1f1cf4a6c52522195dc7217884b69e783698629b5e37243e7da38b65154023881e18e8d10fe4f9d5eb9b497e5c7106f82fc1977c7dbe293d2c86314508830a8f808e064cc2d43cbaf3d86f2eba099762ff725f329fd79411db2f8f300e2852d7a36a2de119d3149a4462c6068883174b6f2f1ddd7550022ab3dbadd586070db6572322e45bbbb5f0f369b2ec252d4aac2ca23996b866454e7c3994129893adfb233f031dae51eb68560f7d71670f4ff8a2798d62bbbf9a3dac10901146add3bf050d74b28c055b0a6d9ab55520c48406d0f230eb5ce42be9da617e2a5ca090b986803343092dc2f4ebb06ab8f90ef9b48f2e0deb70bf104c5a461e8858a027f8c5f0a117d7448bd411803bf86667597d6d4a2b9e92bbe53870f8bf6bc3af9d1a9a20ec1f6b53044018375ee6f1515726e3885d6b54eb704f66e929e93c6012acaf6773bcbe0c435aa9d91319463b22e9cb8bdb5257e947c5144b10e2a9b479a91d4df8c044fc4413951f442cef0a7160734ca250f3c3884c374d5e0122fecf7de8119111755b6d3b56349d9bd8dbaab949066e438c833e24b23a0446b4959a8a12744fb9ec96be560b517ffb221ac191971ad79c40abfa82c4cc9cbcf346cb3688852819952133b8b1a6573ceba2ddf4650cca412267fef9354b4928719fdd7c34f6140f1250dbbe7807cbd178697065c39fe433153729b263f791d07d3768f2457d89c2d7991b80dc40b5dc673f669275e8c9d52642a7430ef0cd0996c0e0b17f753312297d0dbbe4b29289de069650b12acd7d1b605f5880a1a8f00d049331dd218f894811e08a1838dc1a68f16b02c035406e578a78049bee5ec5fc4bb0995681d23c17eeb22ddcaed0934e9ff1afceb5e6b853616466a83b45422baf0ac269b51dbc13a2ef51c126a3cb6b3dcedee5fc441cfa6217541a52e1790aebcf7756abf831dad04d577733aeb7c6da82729605c70695a8ef8ddbe153560e05afd3ea221ed9d5691b46e8934803eb74c8af94c3024008da2e6f9d08e77610c63627f22bcca017aa5d49507c47af89e6b0ef15ee5ed2c65829122683410ad10d93e094ae05abaef00489ef26b3a2bbccc48b1216ee8e2d6ae8889c5c770cb21554f6b714ebfc7a9733d4fd653a812e77cd9478cd3c79243e4fca7132476f620ef46f2e2dd022b7fe7a66c8e98b165953ce8fdfa98d39158fbd13760d66acfbf55248c5c61a29e59051818b087d4d77bf8d5c3d4b84ce5edfc203e18fb0ee68bed2606c420f0b92e592ad862523656c15c30e0debea3cb09e1d174d9f634ab8d0ebf01fc784ab6bb824f4269525956aff620082be3f3c1831a4315d91dd6f5bfaae93228aaeab19f246f90f585eb1b764f582b34fec0f450f86af030f096824bb6bd17e1cf5920fb5b155de5e9715323b0e6ea762b8d13954906a2af75cfae009c6e03998276514053067de637ea13122b23d5f0d577b04a3da945ef2265630e210b87288441112aeb218f6414306fe80ed66b92c7bc5d0fe4c37c20618f3eb959e9821196b1fc31d86eebe99bb1394892776f0693e55299f7fb9751a2b09bc253985f43ca6278745dc4d497d44397a7188a64eedffe21802acfb96c00f061cc4a8cd34e2181c160eeb80543f211c6d191c701a9b97d40c0af023274c734994f8c2ac4cdbfa29306ecc2bdbdadcfd3fff99b2a626c6bb7ce903713124a66ac4cd7299eeef424637a2fe5a1c8b303f8179ca8f3cb351af9dd8137034f918279ce777f786b451a784649947e28ddc58b7f2dc8b87a36d004b7ae261d99867920c4645c0f96fc1e36dc3141da474a7224454ea84b7fcc2804bc1ad907071a357b5d2846e6c947b42309866a36adfcf7c930e5e35eacad92d5e097eea98f0630d42aa8560bdb921e9a9a72b818ba28c3525ae8430e614e4d42526b65c328241a2db2bf92e4f8fff2050f30072aa76868bd22ea665c71224d58f32580f50f4b09625021f17a893117b2999874876e368e7e163fd0262bddb72fa8b8d3c2b91c5c8b5490fb686fed243803ccc88058d108dcb59e1f3ee2448439a47ed749d2bcaef7a350bc6e3bc57978b58a317aa444f6ff834d0e5da57b3b4e7fa88bfe2caf8621b2b883f62505ea31a680cf83e93c3e31d757c7c2ff0a25825e2d12b19bdb0327c1ff5a88e4ea706ac84c3fc3bebfdb16e4f0e40e8918f5727a288b63ab9a9876f1953253c94b308c709658220a25baca61b6929113840921ee865e33fc6e4302ba570e20bbd66a6912ed13fe069d05e8a4492d332f34d86c876d69710e42c21dd4ead0411ee21ae13f5fbc775aee653065f1c8bf69c7c0ac64fe6ba8e308673320a0459eaf5f237df85de1a237a480dcc2b61e9b32364d70e67b59cca6290a801b9d025b086c2ed380dc3a6d14284714d84a3bfcebaa89879f390330d8572c96d58d063f9d3ab7d381c9ca7b237267b1e47de3248d6ee3692fb</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The post requires access token, contact mail:xschur@pm.me if needed
    
    </summary>
    
    
      <category term="note" scheme="https://www.happyhacking.top/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>对acm评测机的简单测试</title>
    <link href="https://www.happyhacking.top/2019/11/21/attack-oj/"/>
    <id>https://www.happyhacking.top/2019/11/21/attack-oj/</id>
    <published>2019-11-21T15:55:41.000Z</published>
    <updated>2019-11-26T16:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>算法作业写烦了，搞搞评测机吧～～</p><a id="more"></a><h2 id="0x01-大致分析"><a href="#0x01-大致分析" class="headerlink" title="0x01 大致分析"></a>0x01 大致分析</h2><p>之前也有听说学校的oj貌似是hh老师亲手写的，另外听学长说可以人肉反汇编．．还有好多关于hh老师的故事，可惜没上过这个老师的课</p><h3 id="支持的语言"><a href="#支持的语言" class="headerlink" title="支持的语言:"></a>支持的语言:</h3><ul><li>GNU C11</li><li>GNU C++11</li><li>JAVA1.8</li><li>python3.5</li></ul><h3 id="评测机的系统"><a href="#评测机的系统" class="headerlink" title="评测机的系统"></a>评测机的系统</h3><p>linux未知版本估计是docker</p><h3 id="关于验证服务机-web-和评测机是否在同一台宿主机上"><a href="#关于验证服务机-web-和评测机是否在同一台宿主机上" class="headerlink" title="关于验证服务机(web)和评测机是否在同一台宿主机上"></a>关于验证服务机(web)和评测机是否在同一台宿主机上</h3><p>服务机必然和评测机有交互(传递用户提交的程序和回传编译测试结果)，做一下全端口扫描，发现只开放了22,80,443三个端口？？？<br>这就比较奇怪了,难道服务机和评测机的通信不走端口？请教了下浩叔，宿主机和docker的通信走的是unix socket，所以扫不到其他另外开放的端口．</p><ul><li><input checked disabled type="checkbox"> 结论：评测机是服务器上的一个docker或者就运行在宿主机上？？？？明显后者不太可靠23333</li></ul><h2 id="0x02-测试思路及过程"><a href="#0x02-测试思路及过程" class="headerlink" title="0x02 测试思路及过程"></a>0x02 测试思路及过程</h2><h3 id="目前对OJ的攻击思路"><a href="#目前对OJ的攻击思路" class="headerlink" title="目前对OJ的攻击思路"></a>目前对OJ的攻击思路</h3><p>acm的这种交题方式本身就比较危险，ctf和安全中讲所有用户的输入都是有害的，但是acm的oj却要去执行用户传过来的代码，相当于ctf中已经找到RCE的点，只不过对一些系统调用进行了更严格的过滤，我们要做的就是绕过这些限制，让系统去执行我们的恶意代码，目前对acm oj的攻击方式也主要集中在以下几个方面：</p><ul><li>通过fork炸弹，死循环等一系列耗尽内存资源</li><li>oj很少对网络操作作限制，可以考虑绕过限制反弹回来一个shell，但其实也就在考虑考虑的层面上，毕竟没人成功过．．</li><li>返回的错误信息可以带出攻击者想要的信息，比如 #include “/etc/passwd”</li><li>结合web端进行攻击，同时注册多个帐号，提交一些占用系统资源较多但不会被检测的程序，堵塞正常用户提交的通道</li><li>或者直接gank掉web端，空留一个可以运行的沙箱也没什么用，实现这个最简单无脑的就是ddos了.</li></ul><p>后面两个的攻击方式的攻击性比较强且没有什么技术含量，毕竟acm和ctf是异父异母的亲兄弟啊，相煎何太急～</p><h3 id="目前OJ的防御方法"><a href="#目前OJ的防御方法" class="headerlink" title="目前OJ的防御方法"></a>目前OJ的防御方法</h3><ul><li>将环境放到docker里</li><li>创建一个低权限的用户来编译执行用户程序，将用户的文件操作权限锁死</li><li>限制程序运行的内存，超出则kill</li><li>开启ASLR</li><li>编译方式优化开启禁止栈执行，金丝雀等编译的安全策略</li><li>调用ptrace或seccomp去过滤用户的系统调用，这两种方式其实又存在着很大的弊端,ptrace的效率低，而seccomp需要提交者主动的在自己的代码中加载策略</li><li>对编译的程序进行hook，LD_PRELOAD加载动态链接库，在动态库中hook__libc_start_main，然后就可以加上自己的代码了</li></ul><p>然后就开始了我们对hhOJ的安全性测试～</p><h3 id="HH的OJ"><a href="#HH的OJ" class="headerlink" title="HH的OJ"></a>HH的OJ</h3><h4 id="创建fork炸弹"><a href="#创建fork炸弹" class="headerlink" title="创建fork炸弹"></a>创建fork炸弹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        fork();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果：<br><img src="https://schur-bed.oss-cn-beijing.aliyuncs.com/blog/fork.jpg" alt="fork"></p><p>fork为一个非法的系统调用，被检测到了,gg</p><h4 id="16G炸弹"><a href="#16G炸弹" class="headerlink" title="16G炸弹"></a>16G炸弹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main[-1u]=&#123;1&#125;;</span><br></pre></td></tr></table></figure><p>其本质也是一个内存炸弹，就是在内存中开了一个相当大的数组，这个数组有多大呢？<br>-1u即无符号整数的最大值0xFFFFFFFF，即这个数组有0xFFFFFFFF个元素，而int类型占有4个字节，4＊0xFFFFFFFF为字节总数，而在编译器编译程序时，将数组初始化的时候会将初始值放到可执行文件中，即要生成一个16GB大小的程序，或者更骚一点，我们可以将数组设为long long类型…</p><p>执行结果：<br><img src="https://schur-bed.oss-cn-beijing.aliyuncs.com/blog/16G.png" alt="16GBomb"></p><p>可以看到生成文件的大小超出了系统的限制，此外暴露除了一个文件　file:///usr/share/doc/gcc-5/README.Bugs，和gcc的版本信息,这个应该可以视为oj的一个微弱特征(假如他们使用同一开源沙箱模块)，去谷歌检索发现了<br><a href="https://github.com/QingdaoU/OnlineJudge/issues/258" target="_blank" rel="noopener">https://github.com/QingdaoU/OnlineJudge/issues/258</a></p><p>到这里我又去看了一下后端,本校的oj是用laravel框架开发的，而青岛大学开源的这个为django开发的，就不能学学人家学校，为开源多做点贡献吗？？？ :)<br>虽然前后端不一样，但还是有理由去尝试一下是不是用的同一沙箱环境．<a href="https://github.com/QingdaoU/Judger/tree/newnew/src" target="_blank" rel="noopener">https://github.com/QingdaoU/Judger/tree/newnew/src</a> 沙箱代码如下，并没有去看，走投无路再回来尝试下．．而且在github的issue下面我发现了，网络访问限制是可以自己配置的，，，竟然还有人要允许requests，这里就会又多出来一个攻击方法了，下面再写．</p><h4 id="requests引起的安全问题"><a href="#requests引起的安全问题" class="headerlink" title="requests引起的安全问题"></a>requests引起的安全问题</h4><p>既然可以使用python那么我是不是可以借助requests等库来造成一个死循环呢？构造一个数据包，当评测机执行代码时，它会向自己再去发送一个数据包，这在实现上也是非常简单的．动手就写？？先import requests试一下嘛，别着急</p><p><img src="https://schur-bed.oss-cn-beijing.aliyuncs.com/blog/requests-error.png" alt="requests-error"></p><p>又是一个被禁用的syscall,不过报错信息有个链接，跟进去看看，发现了好东西，前面的沙箱猜测是错误的不是用的青岛大学那个，而是HUSTOJ的沙箱，前后端应该是自己重构或者别处fork的和原生的不太一样<a href="https://github.com/zhblue/hustoj/tree/master/trunk/core" target="_blank" rel="noopener">沙箱链接</a></p><p>requests库不行转而思考，此类过滤大部分是靠黑名单的方式进行过滤，尝试其他功能类似的库urllib库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">url = &apos;http://***.ceye.io/&apos;</span><br><span class="line">user_agent = &apos;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&apos;</span><br><span class="line">headers = &#123; &apos;User-Agent&apos; : user_agent &#125;</span><br><span class="line">res = urllib.request.Request(url, headers)</span><br><span class="line">response = urllib.request.urlopen(res)</span><br><span class="line">the_page = response.read()</span><br><span class="line">print(the_page.decode(&quot;utf8&quot;))</span><br></pre></td></tr></table></figure><p>运行截图:<br><img src="https://schur-bed.oss-cn-beijing.aliyuncs.com/blog/urllibWA.png" alt></p><p>这里可以看到WA了，这说明我们的代码执行了，检测到非法程序会返回<code>Runtime error</code>，我去ceye的后台看了一下，却没有发现有访问记录，猜测是docker限制了外连．这里又出现了个疑问，docker是不是可以访问到宿主机的端口．由于对这个不太了解，也没办法很简单的验证．到这里的思路是前文提过的：如果docker可以访问到宿主机的端口我们可以写个程序，让他不断前自身提交代码，进而构造出了一个本地ddos来耗尽评测机的资源．可惜找不到比较好的验证方式．．．tcl</p><h4 id="include攻击"><a href="#include攻击" class="headerlink" title="include攻击"></a>include攻击</h4><p>当我们包含一个头文件的时候，系统会不会将包含的头文件给我们以错误信息返回，而这也是在之前的某个oj出现过的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;/etc/passwd&quot;</span><br></pre></td></tr></table></figure><p>但是却提示并不存在该文件不知道什么原因了．．</p><p>写到这里发现算法的ddl就要到了，刺激．．．．</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h2><p><a href="https://strcpy.me/index.php/archives/652/" target="_blank" rel="noopener">https://strcpy.me/index.php/archives/652/</a><br><a href="https://www.zhihu.com/question/23067497" target="_blank" rel="noopener">https://www.zhihu.com/question/23067497</a></p>]]></content>
    
    <summary type="html">
    
      算法作业写烦了,搞搞评测机吧
    
    </summary>
    
    
      <category term="测试" scheme="https://www.happyhacking.top/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="OJ评测机" scheme="https://www.happyhacking.top/tags/OJ%E8%AF%84%E6%B5%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>linux编译安装php拓展</title>
    <link href="https://www.happyhacking.top/2019/11/21/how-to-extend-php/"/>
    <id>https://www.happyhacking.top/2019/11/21/how-to-extend-php/</id>
    <published>2019-11-20T16:00:00.000Z</published>
    <updated>2020-01-15T13:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>维护的一个服务器做了等保，被扫出来两个php的洞，看着文章分析了一下，应该是php的两个拓展出了问题，之前装php也没手动配过拓展，记录一下．</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ wget php-source-code </span><br><span class="line"></span><br><span class="line">$ cd php-ver/ext/target-extension</span><br><span class="line"></span><br><span class="line">$ /path/phpize</span><br><span class="line"></span><br><span class="line">$ ./configure --with-php-config=/path/php-config</span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;维护的一个服务器做了等保，被扫出来两个php的洞，看着文章分析了一下，应该是php的两个拓展出了问题，之前装php也没手动配过拓展，记录一下．&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="web" scheme="https://www.happyhacking.top/categories/web/"/>
    
    
      <category term="php" scheme="https://www.happyhacking.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>github阅读记录</title>
    <link href="https://www.happyhacking.top/2019/11/19/github-read-record/"/>
    <id>https://www.happyhacking.top/2019/11/19/github-read-record/</id>
    <published>2019-11-19T00:00:00.000Z</published>
    <updated>2019-12-04T05:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, access token is required here." />    <label for="hbePass">Hey, access token is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a3f16b0b6eb739165c75c8302b8523b26d32223e8769e457bd56f7a4d9214862">81532bc20dfac1b314ff7c1d51fcfb14092443d94ad87d66d4ba595b04c0d233a94a8e0cefbb1615f5b92434c7978a594cf835a417dc57abdeb78e50f499ee5dd8b80d7f57a826312acf617e2fe5650bd2dd660ad62c6f7be5eb1d2a6e62955680333fa27b1fe079b511ad53a58b38ab2a3c816880d48ea8928c5a4709632aee9e0d9312142e9e6f69ce9c6ac38fbf06805aa45060f2ce08550384f9d8d2b3893d9d4e5dcb6f2a9fba9a4bf8547a10d9119529765b6683849fc1c7d277037480b56e8449f15ee64eb96a4dbefcf443e529521fad4c6e77b11a04d6c37abbcfbb8ec90cfab8cf5d928f0bc59399ece3f12a9c0299a8a8924f1574317fc4510cce304e0172996e2b4d5b98057593b51caebab53e913bae1774f9947fe877aea4526a1a15ba5d54cdba3d963c109ef8a76564d4994cbe33ad7385a014805ef213893c81ae85877353e19770e79dc61374aee11176f1e1d8bd8e42f8b44e48506a83cc5d96b7445dc0a655f54170804754ccc72699b192ee9f1c48a3d2d0ddbbbbaa14ab5f71e20891fdf098bb9bcba4ef83a14fc1f0bf8b1dc958eed9b61fdef13efdb701322239d988db1879f8ca3a0e76f5feb9020a9f7bff75a71327b004ad051b9b08e99e5037d4832e37db983f110db15b74f35853d3becbe92d15882015d9775fbad70bda8ccf708d547c0d65dd19e83909d729cae0aaf75b4705602837bd113bdddf8c1839c6380fedfadd888084a5edd2b9b451bb14fc2654b70677c9a0699a6cd88b8ecd431ab4a99edbf223b2c68f66ff4dd479b550ca36d220935a25b5adb5cfa1f1ed059301602b26bb60499611c50b61ebf43b11ecdf65bb424eb7ef603e96db1cd988a862928bed962c9e4051681cab95b598253810443e2143bd9ca4328d2ab2dc0075a9c45bb8822e32bfd10990cd5626d3557f41b3edcb8907dce71e5f3c919c2f550117c7417be3df5bfe13acc3aea93b3f5e5f1c9368d5187a8f77fabd80443bd3aaa2d7326244f1f18d158a749add4dedbceeeabde8e72f04b943cb38603ea0363c7e53811bd964ad0600199d351c1dcf2f49c68b0e82d855ed9e4391df761b25a514afdd28f06cd159c2189507d59deaf2b19324c80c83093340175c51d84a51ea8e9281bc4cb07b2e546ff128f8eb389be8dbc8d91d5e27dc161eb955d99d59a343a56811589d283cddd57d9ef567cd2265f04776102f1c052bf8097c4a2869bb0d4dab3a7b3a8364879e28a31e6f9aeb6a2bedf09ee104ac05bbc6250d30ae76dff9fc08076142a934c3ad14a40b0380887a16e3fa05bab49b0d856f868b19b2cde40b33bfa0178698d575e8d1aa5db0a2b8f41c6da87911d1681262a70b56292bf4845846d5dea89bd2ec50d4e79d44f5ca52250b66b5319db150c2d6339373c0c6492d9b6624b25b7b04f0f24fb390e185916b0e368cf1cf96dd419607538633dc57a100d696fbbd6f71cd178f17611c4dbb677a74834cebcf5b0ba43c857e8e1e5d083c2e50ef268992fa78d198e08695dbadac7047ab39b98bd80952c4a3ad24a02df3c1f404485cb695f0cdb413f07becf2771d91d1ebca57417afd3ce3c158e8ecef696afb24ea99d545478c4769030b60898df15c008c2b0780b247a101fbfb7d5bf5629d05f9fa050257515f50a68b52bc049429b5fe8add73643a56d94ce9014c57d14df273c2715d4e60259db80302d5c872771b7499feb5e35a4a088d93482a0d146b615e1642bb4b8778c711f4fc51437b1d0448e9e51aafde88735117746ae75d62a70650cb3ae6f8e825744feafeb2196311b411f08ef4dd2b7c107573cd0360e6b03e7aebcecdab055e637b17ac73157040b51c6299de2a57f56d3d1f1a13764f739e43a945d9c921ff9768462c64969a079db7a29c1e35245bd306ab2d686c3d058949177f70abc2dd98bee9e1abb3a4fb815c89ebd0e55cdec5a29e67365c342fb0fda9c5d1dbce9b8eba38afc7046205a6b5f69c1b1b5524d823525fd2c8ac55eba549bbb3ae769d0f81ba3af575eb658975eebc3dd67bc9b8f0e55985600f98b5fbf070bba081874bbfa3a9c7f02691c65beb5861ec6e3214b000d3a4525b15fad2e07b2721e1df908536a75ce40545538bb82d100638ddd84881086f8f8bf3a506d81208ae69468b95f20ab3b1054c823be32ccbbd4f915efd4ead79db702affc934ff052143951f2fbcc7b586a3624006ecd73265fdf0bfbdbadb0dff25132e3ffddd203b42c761846599a6c45370ae2867da71a5e0d9c0df6353c51e9f65b508319abc025058880805f1d35feb018eef17329ab26e93fbaf27b57ff04b1f8b5f8e6bac241e424765e9db1c407532d01e2d792a1c224d173ce86e21927c2e2156f238de78d8acda780100ca74bc6a19a01b7e09e3cf2b28a900df0df51041defe7c508a3b71f140bb25c7b8c2b3a5a605eea1249af2f577cbba1aad6c7524a6583edb1028df71fd82a08489423b2602ceb552ee4f41f4442a8744d2bbbce78874104ef8909c34316ecc9ec5cd96516fab5e32741b32cbca94c0816d62631b93329e3402223761787fbe6c9b4852f4c18d7777fa7d749ef1ae48193acd0a78cae0bf2cefdfa22e4ab6aaf2b8da35ce91097281ae43deb1db10ac80b06dcfb10dfd2d8c94a65d874f7d70b99c01ebfa2977ef56300f827b3fe7511a8cc81b513152fbcda602d1eab606a7b4e6597928570f272d00960b9a75676d1c83ddeda1a667a04ef1c80eae2eac755680766a438863a05ca1f94c8a1e946ad39cfd70c6d35062e9699c6657c936039e08660d8d116f2d9be821cc3d545930bc17b59647ad454cafc0fe2bc13732cb2171d7bde45ef15e8978972d76bd42619a86dc8247ebc68e3d172db00f5551efd7f74be9e2ab241c629bb57a62b22e50492f9f8ca51911290b7edeff3b6f165ebc9bbe352edee6b435278b8d30deb70d819527581e959abacca49e432b3b0aef1e93d6c33a0dcfbbcc5004b519a9a684f01b819a767c6837624fad86d0e4bf0d790c10cf93ff47ee2aae2950d5c38b108b32785c56284251122bb8161114e09e473342242526c7fa6e49ec712d08faa62b5b2d6caba137b12510507353ef8a47c8c384309d868f4ab9726a498f00c47f24d09e896e8f63df28f67b96b395f94a344bf8a0f39a4692d8e7267d8480109d4cf3050bbb78f6d49b0576958437750e8c9d85c8438b186b2ac5bd42967de4a0b251b63bbf4285d1d8d4041cfc6f3f7b4b4fcfcc8d9745afba2e9b23400b70e4720614b7ee679b7d6faa97084c18af497fef5c6d3317a53d57501974f570eaf9dbbf9ceaa8794e9c83d588db400603a1f355eff6990a3263125db33a0928a68902d1ed72d96289d940bc1d80239928d8afe564967e1220eb3e3c8a5255932fba426e1b2831de33a7d08457583d33ab8eb0d8407b00ad01ce2788b721d6d7f21427839e78fd83d8d737e4f7667b59a5f52dd4bf30fdfeb13e364f9b7fc31af55ee9597ecca6e327a092499aba7efa2cc6e56da6f3abdc00f47bcaf681ad786f20cc22459f82e0e94a11f1372a9d21018825cc6c12c854341132d780749e6e3860d2174e4aec96906392c36a58157b4e9d2ec0ce927bc2ceb522c0e6875b0bfcb881040075b1137119806172195031b4d4878a4a2111f1848e2ef32bcaae2e7f1570fff7b2c2847af6ac9b3f511c327b0de1ed6667533a0f06a0bab2ff140c104a2c38</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      记录一下阅读到的优秀项目,逐步形成自己的idea池
    
    </summary>
    
    
      <category term="note" scheme="https://www.happyhacking.top/categories/note/"/>
    
    
      <category term="reading" scheme="https://www.happyhacking.top/tags/reading/"/>
    
      <category term="note" scheme="https://www.happyhacking.top/tags/note/"/>
    
  </entry>
  
</feed>
